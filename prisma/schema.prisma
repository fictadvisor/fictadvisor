// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  APPROVED
  PENDING
  DECLINED
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  username            String?
  avatar              String?
  password            String?
  telegramId          Int?             @unique @map("telegram_id")
  student             Student?
  superhero           Superhero?
  questionAnswers     QuestionAnswer[]
  lastPasswordChanged DateTime         @default(now())
  state               State            @default(PENDING)

  @@map("users")
}

model Group {
  id               String            @id @default(uuid())
  code             String
  students         Student[]
  disciplines      Discipline[]
  groupRoles       GroupRole[]
  events           Event[]
  selectiveAmounts SelectiveAmount[]

  @@map("groups")
}

model GroupRole {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId  String @unique

  @@id([groupId, roleId])
  @@map("group_roles")
}

model Student {
  user                      User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String                     @unique @map("user_id")
  firstName                 String?                    @default("") @map("first_name")
  middleName                String?                    @default("") @map("middle_name")
  lastName                  String?                    @default("") @map("last_name")
  groupId                   String                     @map("group_id")
  group                     Group                      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  selectiveDisciplines      SelectiveDiscipline[]
  roles                     UserRole[]
  state                     State                      @default(PENDING)
  removedDisciplineTeachers RemovedDisciplineTeacher[]

  @@map("students")
}

model Superhero {
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique @map("user_id")
  dorm   Boolean
  state  State   @default(PENDING)

  @@map("superheroes")
}

model Subject {
  id          String       @id @default(uuid())
  name        String
  disciplines Discipline[]

  @@map("subjects")
}

model Discipline {
  id                   String                @id @default(uuid())
  subject              Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId            String                @map("subject_id")
  group                Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId              String                @map("group_id")
  semester             Int
  year                 Int
  isSelective          Boolean               @default(false) @map("is_selective")
  description          String                @default("")
  selectiveDisciplines SelectiveDiscipline[]
  disciplineTypes      DisciplineType[]
  disciplineTeachers   DisciplineTeacher[]

  @@map("disciplines")
}

model SelectiveDiscipline {
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId String     @map("discipline_id")
  student      Student    @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId    String     @map("student_id")

  @@id([disciplineId, studentId])
  @@map("selective_disciplines")
}

model SelectiveAmount {
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String @map("group_id")
  year     Int
  semester Int
  amount   Int

  @@id([groupId, year, semester])
  @@map("selective_amounts")
}

enum DisciplineTypeEnum {
  LECTURE
  PRACTICE
  LABORATORY
  CONSULTATION
  WORKOUT
  EXAM
}

model DisciplineType {
  id                     String                  @id @default(uuid())
  discipline             Discipline              @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId           String                  @map("discipline_id")
  name                   DisciplineTypeEnum
  disciplineTeacherRoles DisciplineTeacherRole[]
  lessons                Lesson[]

  @@map("discipline_types")
}

enum TeacherRole {
  LECTURER
  LABORANT
  PRACTICIAN
}

model Teacher {
  id                 String                @id @default(uuid())
  firstName          String                @map("first_name")
  middleName         String?               @default("") @map("middle_name")
  lastName           String                @map("last_name")
  description        String?
  avatar             String?
  rating             Decimal               @default(0.00) @db.Decimal(5, 2)
  disciplineTeachers DisciplineTeacher[]
  cathedras          TeachersOnCathedras[]

  @@map("teachers")
}

model DisciplineTeacher {
  id                        String                     @id @default(uuid())
  teacher                   Teacher                    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId                 String                     @map("teacher_id")
  discipline                Discipline                 @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId              String                     @map("discipline_id")
  roles                     DisciplineTeacherRole[]
  questionAnswers           QuestionAnswer[]
  removedDisciplineTeachers RemovedDisciplineTeacher[]

  @@map("discipline_teachers")
}

enum QuestionDisplay {
  RADAR
  CIRCLE
  AMOUNT
  TEXT
}

enum QuestionType {
  TEXT
  SCALE
  TOGGLE
}

model Question {
  id              String           @id @default(uuid())
  category        String
  name            String
  order           Int              @default(0)
  description     String?
  text            String
  isRequired      Boolean          @default(true) @map("is_required")
  criteria        String?
  type            QuestionType
  display         QuestionDisplay  @default(RADAR)
  questionRoles   QuestionRole[]
  questionAnswers QuestionAnswer[]

  @@map("questions")
}

model QuestionRole {
  role       TeacherRole
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String      @map("question_id")
  isShown    Boolean     @map("is_shown")
  isRequired Boolean     @map("is_required")

  @@id([questionId, role])
  @@map("question_roles")
}

model QuestionAnswer {
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)
  disciplineTeacherId String            @map("discipline_teacher_id")
  question            Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId          String            @map("question_id")
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @map("user_id")
  value               String

  @@id([disciplineTeacherId, questionId, userId])
  @@map("question_answers")
}

enum RoleName {
  USER
  STUDENT
  MODERATOR
  CAPTAIN
  ADMIN
}

model Role {
  id        String     @id @default(uuid())
  name      RoleName
  weight    Int
  userRoles UserRole[]
  grants    Grant[]
  groupRole GroupRole?
  parentId  String?
  parent    Role?      @relation("Inheritance", fields: [parentId], references: [id])
  children  Role[]     @relation("Inheritance")

  @@map("roles")
}

model UserRole {
  student   Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId String  @map("student_id")
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String  @map("role_id")

  @@id([studentId, roleId])
  @@map("user_roles")
}

model Grant {
  id         String  @id @default(uuid())
  role       Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String  @map("role_id")
  permission String
  set        Boolean @default(true)

  @@map("grants")
}

enum EntityType {
  STUDENT
  TEACHER
}

model Contact {
  id          String     @id @default(uuid())
  name        String
  displayName String
  link        String?
  entityType  EntityType @map("entity_type")
  entityId    String     @map("entity_id")

  @@map("contacts")
}

model SemesterDate {
  year      Int
  semester  Int
  startDate DateTime @map("start_date")
  endDate   DateTime @default("2023-01-01T00:00:00.000Z") @map("end_date")

  @@id([year, semester])
  @@map("semester_dates")
}

model DisciplineTeacherRole {
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)
  disciplineTeacherId String            @map("discipline_teacher_id")
  disciplineType      DisciplineType    @relation(fields: [disciplineTypeId], references: [id], onDelete: Cascade)
  disciplineTypeId    String            @map("discipline_type_id")
  role                TeacherRole

  @@id([disciplineTeacherId, disciplineTypeId, role])
  @@map("discipline_teacher_roles")
}

model DateVar {
  name String   @unique
  date DateTime

  @@map("date_vars")
}

model StudentResource {
  id   String @id @default(uuid())
  link String
  name String
  icon String

  @@map("student_resources")
}

enum Period {
  NO_PERIOD
  EVERY_WEEK
  EVERY_FORTNIGHT
}

model Event {
  id        String      @id @default(uuid())
  name      String
  startTime DateTime    @map("start_time")
  endTime   DateTime    @map("end_time")
  period    Period
  url       String
  group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String      @map("group_id")
  eventInfo EventInfo[]
  lessons   Lesson[]

  @@map("events")
}

model EventInfo {
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String @map("event_id")
  number      Int
  description String

  @@id([eventId, number])
  @@map("event_info")
}

model Lesson {
  event            Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String         @map("event_id")
  disciplineType   DisciplineType @relation(fields: [disciplineTypeId], references: [id], onDelete: Cascade)
  disciplineTypeId String         @map("discipline_type_id")

  @@id([eventId, disciplineTypeId])
  @@map("lessons")
}

model RemovedDisciplineTeacher {
  studentId           String            @map("student_id")
  disciplineTeacherId String            @map("discipline_teacher_id")
  student             Student           @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)

  @@id([disciplineTeacherId, studentId])
  @@map("removed_discipline_teachers")
}

model Cathedra {
  id           String                @id @default(uuid())
  name         String                @default("")
  abbreviation String
  teachers     TeachersOnCathedras[]

  @@map("cathedras")
}

model TeachersOnCathedras {
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  String   @map("teacher_id")
  cathedra   Cathedra @relation(fields: [cathedraId], references: [id], onDelete: Cascade)
  cathedraId String   @map("cathedra_id")

  @@id([teacherId, cathedraId])
  @@map("teachers_on_cathedras")
}
