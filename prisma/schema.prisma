// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  APPROVED
  PENDING
  DECLINED
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  username            String?
  avatar              String?
  password            String?
  telegramId          BigInt?          @unique @map("telegram_id")
  student             Student?
  superhero           Superhero?
  questionAnswers     QuestionAnswer[]
  lastPasswordChanged DateTime         @default(now())
  state               State            @default(PENDING)
  createdAt           DateTime?        @default(now()) @map("created_at")
  updatedAt           DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Group {
  id               String            @id @default(uuid())
  code             String
  students         Student[]
  disciplines      Discipline[]
  groupRoles       GroupRole[]
  events           Event[]
  selectiveAmounts SelectiveAmount[]
  telegramGroups   TelegramGroup[]
  createdAt        DateTime?         @default(now()) @map("created_at")
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at")

  @@map("groups")
}

enum TelegramSource {
  GROUP
  CHANNEL
  PERSONAL_CHAT
  CHAT_WITH_THREADS
}

model TelegramGroup {
  group      Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String         @map("group_id")
  telegramId BigInt         @map("telegram_id")
  threadId   BigInt?        @map("thread_id")
  source     TelegramSource
  postInfo   Boolean        @default(false) @map("post_info")
  createdAt  DateTime?      @default(now()) @map("created_at")
  updatedAt  DateTime?      @default(now()) @updatedAt @map("updated_at")

  @@id([groupId, telegramId])
  @@map("telegram_groups")
}

model GroupRole {
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String    @unique
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([groupId, roleId])
  @@map("group_roles")
}

model Student {
  user                      User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String                     @unique @map("user_id")
  firstName                 String?                    @default("") @map("first_name")
  middleName                String?                    @default("") @map("middle_name")
  lastName                  String?                    @default("") @map("last_name")
  groupId                   String                     @map("group_id")
  group                     Group                      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  selectiveDisciplines      SelectiveDiscipline[]
  roles                     UserRole[]
  state                     State                      @default(PENDING)
  removedDisciplineTeachers RemovedDisciplineTeacher[]
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @default(now()) @updatedAt @map("updated_at")

  @@map("students")
}

model Superhero {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique @map("user_id")
  dorm      Boolean
  state     State     @default(PENDING)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("superheroes")
}

model Subject {
  id          String       @id @default(uuid())
  name        String
  disciplines Discipline[]
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @updatedAt @map("updated_at")

  @@map("subjects")
}

model Discipline {
  id                   String                @id @default(uuid())
  subject              Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId            String                @map("subject_id")
  group                Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId              String                @map("group_id")
  semester             Int
  year                 Int
  isSelective          Boolean               @default(false) @map("is_selective")
  description          String                @default("")
  selectiveDisciplines SelectiveDiscipline[]
  disciplineTypes      DisciplineType[]
  disciplineTeachers   DisciplineTeacher[]
  createdAt            DateTime?             @default(now()) @map("created_at")
  updatedAt            DateTime?             @default(now()) @updatedAt @map("updated_at")

  @@map("disciplines")
}

model SelectiveDiscipline {
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId String     @map("discipline_id")
  student      Student    @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId    String     @map("student_id")
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @default(now()) @updatedAt @map("updated_at")

  @@id([disciplineId, studentId])
  @@map("selective_disciplines")
}

model SelectiveAmount {
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String    @map("group_id")
  year      Int
  semester  Int
  amount    Int
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([groupId, year, semester])
  @@map("selective_amounts")
}

enum DisciplineTypeEnum {
  LECTURE
  PRACTICE
  LABORATORY
  CONSULTATION
  WORKOUT
  EXAM
}

model DisciplineType {
  id                     String                  @id @default(uuid())
  discipline             Discipline              @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId           String                  @map("discipline_id")
  name                   DisciplineTypeEnum
  disciplineTeacherRoles DisciplineTeacherRole[]
  lessons                Lesson[]
  createdAt              DateTime?               @default(now()) @map("created_at")
  updatedAt              DateTime?               @default(now()) @updatedAt @map("updated_at")

  @@map("discipline_types")
}

enum TeacherRole {
  LECTURER
  LABORANT
  PRACTICIAN
  EXAMINER
  OTHER
}

model Teacher {
  id                 String                @id @default(uuid())
  firstName          String                @map("first_name")
  middleName         String?               @default("") @map("middle_name")
  lastName           String                @map("last_name")
  description        String?
  avatar             String?
  rating             Decimal               @default(0.00) @db.Decimal(5, 2)
  disciplineTeachers DisciplineTeacher[]
  cathedras          TeachersOnCathedras[]
  createdAt          DateTime?             @default(now()) @map("created_at")
  updatedAt          DateTime?             @default(now()) @updatedAt @map("updated_at")

  @@map("teachers")
}

model DisciplineTeacher {
  id                        String                     @id @default(uuid())
  teacher                   Teacher                    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId                 String                     @map("teacher_id")
  discipline                Discipline                 @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId              String                     @map("discipline_id")
  roles                     DisciplineTeacherRole[]
  questionAnswers           QuestionAnswer[]
  removedDisciplineTeachers RemovedDisciplineTeacher[]
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @default(now()) @updatedAt @map("updated_at")

  @@map("discipline_teachers")
}

enum QuestionDisplay {
  RADAR
  CIRCLE
  AMOUNT
  TEXT
}

enum QuestionType {
  TEXT
  SCALE
  TOGGLE
}

model Question {
  id              String           @id @default(uuid())
  category        String
  name            String
  order           Int              @default(0)
  description     String?
  text            String
  isRequired      Boolean          @default(true) @map("is_required")
  criteria        String?
  type            QuestionType
  display         QuestionDisplay  @default(RADAR)
  questionRoles   QuestionRole[]
  questionAnswers QuestionAnswer[]
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@map("questions")
}

model QuestionRole {
  role       TeacherRole
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String      @map("question_id")
  isShown    Boolean     @map("is_shown")
  isRequired Boolean     @map("is_required")
  createdAt  DateTime?   @default(now()) @map("created_at")
  updatedAt  DateTime?   @default(now()) @updatedAt @map("updated_at")

  @@id([questionId, role])
  @@map("question_roles")
}

model QuestionAnswer {
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)
  disciplineTeacherId String            @map("discipline_teacher_id")
  question            Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId          String            @map("question_id")
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @map("user_id")
  value               String
  createdAt           DateTime?         @default(now()) @map("created_at")
  updatedAt           DateTime?         @default(now()) @updatedAt @map("updated_at")

  @@id([disciplineTeacherId, questionId, userId])
  @@map("question_answers")
}

enum RoleName {
  USER
  STUDENT
  MODERATOR
  CAPTAIN
  ADMIN
}

model Role {
  id          String     @id @default(uuid())
  name        RoleName
  weight      Int
  userRoles   UserRole[]
  grants      Grant[]
  groupRole   GroupRole?
  parentId    String?
  parent      Role?      @relation("Inheritance", fields: [parentId], references: [id])
  children    Role[]     @relation("Inheritance")
  createdAt   DateTime?  @default(now()) @map("created_at")
  updatedAt   DateTime?  @default(now()) @updatedAt @map("updated_at")
  displayName String?    @map("display_name")

  @@map("roles")
}

model UserRole {
  student   Student   @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId String    @map("student_id")
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String    @map("role_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([studentId, roleId])
  @@map("user_roles")
}

model Grant {
  id         String    @id @default(uuid())
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String    @map("role_id")
  permission String
  set        Boolean   @default(true)
  weight     Int       @default(1)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("grants")
}

enum EntityType {
  STUDENT
  TEACHER
}

model Contact {
  id          String     @id @default(uuid())
  name        String
  displayName String
  link        String?
  entityType  EntityType @map("entity_type")
  entityId    String     @map("entity_id")
  createdAt   DateTime?  @default(now()) @map("created_at")
  updatedAt   DateTime?  @default(now()) @updatedAt @map("updated_at")

  @@map("contacts")
}

model SemesterDate {
  year      Int
  semester  Int
  startDate DateTime  @map("start_date")
  endDate   DateTime  @default("2023-01-01T00:00:00.000Z") @map("end_date")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([year, semester])
  @@map("semester_dates")
}

model DisciplineTeacherRole {
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)
  disciplineTeacherId String            @map("discipline_teacher_id")
  disciplineType      DisciplineType    @relation(fields: [disciplineTypeId], references: [id], onDelete: Cascade)
  disciplineTypeId    String            @map("discipline_type_id")
  role                TeacherRole
  createdAt           DateTime?         @default(now()) @map("created_at")
  updatedAt           DateTime?         @default(now()) @updatedAt @map("updated_at")

  @@id([disciplineTeacherId, disciplineTypeId, role])
  @@map("discipline_teacher_roles")
}

model DateVar {
  name      String    @unique
  date      DateTime
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("date_vars")
}

model StudentResource {
  id        String    @id @default(uuid())
  link      String
  name      String
  icon      String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("student_resources")
}

enum Period {
  NO_PERIOD
  EVERY_WEEK
  EVERY_FORTNIGHT
}

model Event {
  id        String      @id @default(uuid())
  name      String
  startTime DateTime    @map("start_time")
  endTime   DateTime    @map("end_time")
  period    Period
  url       String?
  group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String      @map("group_id")
  eventInfo EventInfo[]
  lessons   Lesson[]
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @default(now()) @updatedAt @map("updated_at")

  @@map("events")
}

model EventInfo {
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String    @map("event_id")
  number      Int
  description String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([eventId, number])
  @@map("event_info")
}

model Lesson {
  event            Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String         @map("event_id")
  disciplineType   DisciplineType @relation(fields: [disciplineTypeId], references: [id], onDelete: Cascade)
  disciplineTypeId String         @map("discipline_type_id")
  createdAt        DateTime?      @default(now()) @map("created_at")
  updatedAt        DateTime?      @default(now()) @updatedAt @map("updated_at")

  @@id([eventId, disciplineTypeId])
  @@map("lessons")
}

model RemovedDisciplineTeacher {
  studentId           String            @map("student_id")
  disciplineTeacherId String            @map("discipline_teacher_id")
  student             Student           @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id], onDelete: Cascade)
  createdAt           DateTime?         @default(now()) @map("created_at")
  updatedAt           DateTime?         @default(now()) @updatedAt @map("updated_at")

  @@id([disciplineTeacherId, studentId])
  @@map("removed_discipline_teachers")
}

model Cathedra {
  id           String                @id @default(uuid())
  name         String                @default("")
  abbreviation String
  teachers     TeachersOnCathedras[]
  createdAt    DateTime?             @default(now()) @map("created_at")
  updatedAt    DateTime?             @default(now()) @updatedAt @map("updated_at")

  @@map("cathedras")
}

model TeachersOnCathedras {
  teacher    Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  String    @map("teacher_id")
  cathedra   Cathedra  @relation(fields: [cathedraId], references: [id], onDelete: Cascade)
  cathedraId String    @map("cathedra_id")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([teacherId, cathedraId])
  @@map("teachers_on_cathedras")
}

model QueueUser {
  id             Int             @id @default(autoincrement())
  username       String?
  firstName      String          @map("first_name")
  middleName     String?         @map("middle_name")
  lastName       String          @map("last_name")
  telegramId     BigInt?         @map("telegram_id")
  email          String?
  phone          String?
  specialty      String
  isDorm         Boolean?        @map("is_dorm")
  printedEdbo    Boolean?        @map("printed_edbo")
  queuePositions QueuePosition[]
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @default(now()) @updatedAt @map("updated_at")

  @@map("queue_users")
}

enum QueuePositionStatus {
  WAITING
  GOING
  PROCESSING
}

model QueuePosition {
  id                   Int                 @id @default(autoincrement())
  user                 QueueUser           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int                 @map("user_id")
  queue                Queue               @relation(fields: [queueId], references: [id], onDelete: Cascade)
  queueId              Int                 @map("queue_id")
  code                 Int
  position             Int
  status               QueuePositionStatus @default(WAITING)
  lastNotifiedPosition Int                 @default(0) @map("last_notified_position")
  createdAt            DateTime?           @default(now()) @map("created_at")
  updatedAt            DateTime?           @default(now()) @updatedAt @map("updated_at")

  @@map("queue_positions")
}

model Queue {
  id        Int             @id @default(autoincrement())
  name      String
  active    Boolean
  open      Boolean         @default(false)
  positions QueuePosition[]
  createdAt DateTime?       @default(now()) @map("created_at")
  updatedAt DateTime?       @default(now()) @updatedAt @map("updated_at")

  @@map("queues")
}

enum EducationalDegree {
  BACHELOR
  MASTER
  PHILOSOPHY
}

enum EducationalProgramType {
  PROFESSIONAL
  SCIENTIFIC
}

model Entrant {
  id                 String                 @id @default(uuid())
  firstName          String                 @map("first_name")
  middleName         String?                @map("middle_name")
  lastName           String                 @map("last_name")
  specialty          String?
  degree             EducationalDegree      @default(BACHELOR)
  specialties        Specialty[]
  educationalProgram String                 @default("") @map("educational_program")
  programType        EducationalProgramType @default(PROFESSIONAL) @map("program_type")
  studyType          String                 @default("") @map("study_type")
  studyForm          String                 @default("") @map("study_form")
  paymentType        String                 @default("") @map("payment_type")
  benefit            Boolean                @default(false)
  group              String?
  entrantData        EntrantData?
  representativeData RepresentativeData?
  customerData       CustomerData?
  priority           EntrantPriority?
  contract           Contract?
  competitivePoint   Float?                 @map("competitive_point")
  inOrder            Boolean                @default(false)
  createdAt          DateTime?              @default(now()) @map("created_at")
  updatedAt          DateTime?              @default(now()) @updatedAt @map("updated_at")

  @@map("entrants")
}

model EntrantPriority {
  entrant    Entrant       @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId  String        @unique @map("entrant_id")
  state      PriorityState
  date       String
  priorities Priority[]
  createdAt  DateTime?     @default(now()) @map("created_at")
  updatedAt  DateTime?     @default(now()) @updatedAt @map("updated_at")

  @@map("entrant_priorities")
}

model Priority {
  entrant   EntrantPriority  @relation(fields: [entrantId], references: [entrantId], onDelete: Cascade)
  entrantId String           @map("entrant_id")
  priority  Int
  program   EducationProgram
  createdAt DateTime?        @default(now()) @map("created_at")
  updatedAt DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@id([entrantId, priority])
  @@map("priorities")
}

enum EducationProgram {
  CSSE
  ISSE
  IIS
  ISRS
  IMST
}

model EntrantData {
  entrant           Entrant   @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId         String    @unique @map("entrant_id")
  passportSeries    String?   @map("passport_series")
  passportNumber    String    @map("passport_number")
  passportInstitute String    @map("passport_institute")
  passportDate      String    @map("passport_date")
  region            String?
  settlement        String
  address           String
  index             String
  idCode            String?   @map("id_code")
  phoneNumber       String    @map("phone_number")
  email             String
  createdAt         DateTime? @default(now()) @map("created_at")
  updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("entrant_data")
}

model RepresentativeData {
  entrant           Entrant   @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId         String    @unique @map("entrant_id")
  firstName         String    @map("first_name")
  middleName        String?   @map("middle_name")
  lastName          String    @map("last_name")
  passportSeries    String?   @map("passport_series")
  passportNumber    String    @map("passport_number")
  passportInstitute String    @map("passport_institute")
  passportDate      String    @map("passport_date")
  region            String?
  settlement        String
  address           String
  index             String
  idCode            String?   @map("id_code")
  phoneNumber       String    @map("phone_number")
  email             String?
  createdAt         DateTime? @default(now()) @map("created_at")
  updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("representative_data")
}

model CustomerData {
  entrant           Entrant   @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId         String    @unique @map("entrant_id")
  firstName         String    @map("first_name")
  middleName        String?   @map("middle_name")
  lastName          String    @map("last_name")
  passportSeries    String?   @map("passport_series")
  passportNumber    String    @map("passport_number")
  passportInstitute String    @map("passport_institute")
  passportDate      String    @map("passport_date")
  region            String?
  settlement        String
  address           String
  index             String
  idCode            String?   @map("id_code")
  phoneNumber       String    @map("phone_number")
  email             String?
  createdAt         DateTime? @default(now()) @map("created_at")
  updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("customer_data")
}

enum PriorityState {
  APPROVED
  NOT_APPROVED
}

model Contract {
  entrant   Entrant   @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId String    @unique @map("entrant_id")
  number    String
  date      String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("contracts")
}

enum StudyForm {
  FULL_TIME
  PART_TIME
}

model EdboBudget {
  id               String    @id @default(uuid())
  fullName         String    @map("full_name")
  specialty        String
  studyForm        StudyForm @map("study_form")
  competitivePoint Float     @map("competitive_point")
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("edbo_budget")
}

model Specialty {
  entrant   Entrant   @relation(fields: [entrantId], references: [id], onDelete: Cascade)
  entrantId String    @unique @map("entrant_id")
  specialty String
  studyForm String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([entrantId, specialty])
  @@map("specialties")
}

model ResetPasswordToken {
  token     String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("reset_password_tokens")
}

model RegisterTelegramToken {
  token      String   @id @default(uuid())
  telegramId BigInt   @map("telegram_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("register_password_tokens")
}

model VerifyEmailToken {
  token      String   @id @default(uuid())
  username   String
  email      String
  password   String
  avatar     String?
  telegramId BigInt?  @map("telegram_id")
  isCaptain  Boolean  @map("is_captain")
  groupId    String   @map("group_id")
  middleName String?  @map("middle_name")
  lastName   String   @map("last_name")
  firstName  String   @map("first_name")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("verify_email_tokens")
}
