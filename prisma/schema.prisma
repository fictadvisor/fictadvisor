// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  APPROVED
  PENDING
  DECLINED
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  username       String           @unique
  avatar         String?
  password       String?
  telegramId     String?          @unique @map("telegram_id")
  Student        Student?
  Superhero      Superhero?
  QuestionAnswer QuestionAnswer[]

  @@map("users")
}

model Group {
  id         String       @id @default(uuid())
  code       String
  Student    Student[]
  Discipline Discipline[]

  @@map("groups")
}

model Student {
  user                User                  @relation(fields: [userId], references: [id])
  userId              String                @unique @map("user_id")
  firstName           String                @map("first_name")
  middleName          String?               @map("middle_name")
  lastName            String                @map("last_name")
  groupId             String                @map("group_id")
  group               Group                 @relation(fields: [groupId], references: [id])
  SelectiveDiscipline SelectiveDiscipline[]
  StudentRole         StudentRole[]

  @@map("students")
}

model Superhero {
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @map("user_id")
  dorm   Boolean
  state  State   @default(PENDING)

  @@map("superheroes")
}

model Subject {
  id         String       @id @default(uuid())
  name       String
  Discipline Discipline[]

  @@map("subjects")
}

model Discipline {
  id                  String                @id @default(uuid())
  subject             Subject               @relation(fields: [subjectId], references: [id])
  subjectId           String                @map("subject_id")
  group               Group                 @relation(fields: [groupId], references: [id])
  groupId             String                @map("group_id")
  semester            String
  isSelective         Boolean               @default(false) @map("is_selective")
  evaluatingSystem    String?               @map("evaluating_system")
  resource            String?
  SelectiveDiscipline SelectiveDiscipline[]
  DisciplineType      DisciplineType[]

  @@map("disciplines")
}

model SelectiveDiscipline {
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId String     @map("discipline_id")
  student      Student    @relation(fields: [studentId], references: [userId])
  studentId    String     @map("student_id")

  @@id([disciplineId, studentId])
  @@map("selective_disciplines")
}

enum DisciplineTypeEnum {
  LECTURE
  PRACTICE
  LABORATORY
  CONSULTATION
  WORKOUT
  EXAM
}

model DisciplineType {
  id                String              @id @default(uuid())
  discipline        Discipline          @relation(fields: [disciplineId], references: [id])
  disciplineId      String              @map("discipline_id")
  name              DisciplineTypeEnum
  Lesson            Lesson[]
  DisciplineTeacher DisciplineTeacher[]

  @@map("discipline_types")
}

model Lesson {
  id                String              @id @default(uuid())
  startTime         DateTime            @map("start_time")
  endTime           DateTime?           @map("end_time")
  url               String
  disciplineType    DisciplineType      @relation(fields: [disciplineTypeId], references: [id])
  disciplineTypeId  String              @map("discipline_type_id")
  DynamicLessonInfo DynamicLessonInfo[]

  @@map("lessons")
}

enum DynamicLessonInfoType {
  TAG
  HOMEWORK
  URL
  TEACHER
}

model DynamicLessonInfo {
  lesson   Lesson                @relation(fields: [lessonId], references: [id])
  lessonId String                @id @map("lesson_id")
  type     DynamicLessonInfoType
  value    String
  date     DateTime

  @@map("dynamic_lesson_info")
}

enum TeacherRole {
  LECTURER
  LABORANT
  PRACTICIAN
}

model Teacher {
  id                String              @id @default(uuid())
  firstName         String              @map("first_name")
  middleName        String              @map("middle_name")
  lastName          String              @map("last_name")
  description       String?
  avatar            String?
  DisciplineTeacher DisciplineTeacher[]

  @@map("teachers")
}

model DisciplineTeacher {
  id               String           @id @default(uuid())
  teacher          Teacher          @relation(fields: [teacherId], references: [id])
  teacherId        String           @map("teacher_id")
  role             TeacherRole
  disciplineType   DisciplineType   @relation(fields: [disciplineTypeId], references: [id])
  disciplineTypeId String           @map("discipline_type_id")
  QuestionAnswer   QuestionAnswer[]

  @@map("discipline_teachers")
}

enum QuestionType {
  TEXT
  SCALE
  TOGGLE
}

model Question {
  id             String           @id @default(uuid())
  name           String
  text           String
  criteria       String?
  type           QuestionType
  QuestionRole   QuestionRole[]
  QuestionAnswer QuestionAnswer[]

  @@map("questions")
}

model QuestionRole {
  role       TeacherRole
  question   Question    @relation(fields: [questionId], references: [id])
  questionId String      @map("question_id")
  isShown    Boolean     @map("is_shown")
  isRequired Boolean     @map("is_required")

  @@id([questionId, role])
  @@map("question_roles")
}

model QuestionAnswer {
  disciplineTeacher   DisciplineTeacher @relation(fields: [disciplineTeacherId], references: [id])
  disciplineTeacherId String            @map("discipline_teacher_id")
  question            Question          @relation(fields: [questionId], references: [id])
  questionId          String            @map("question_id")
  user                User              @relation(fields: [userId], references: [id])
  userId              String            @map("user_id")
  state               State
  value               String

  @@id([disciplineTeacherId, questionId, userId])
  @@map("question_answers")
}

enum UserRoleName {
  STUDENT
  MODERATOR
  CAPTAIN
  ADMIN
}

model UserRole {
  id          String        @id @default(uuid())
  name        UserRoleName
  priority    Int
  StudentRole StudentRole[]
  Grant       Grant[]

  @@map("user_roles")
}

model StudentRole {
  student   Student  @relation(fields: [studentId], references: [userId])
  studentId String   @map("student_id")
  role      UserRole @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id")

  @@id([studentId, roleId])
  @@map("student_roles")
}

model Permission {
  id    String  @id @default(uuid())
  name  String
  Grant Grant[]

  @@map("permissions")
}

model Grant {
  id           String     @id @default(uuid())
  role         UserRole   @relation(fields: [roleId], references: [id])
  roleId       String     @map("role_id")
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")
  set          Boolean    @default(true)
  scope        String

  @@map("grants")
}

enum EntityType {
  STUDENT
  TEACHER
}

model Contact {
  id         String     @id @default(uuid())
  name       String
  value      String
  entityType EntityType @map("entity_type")
  entityId   String     @map("entity_id")

  @@map("contacts")
}
